% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/blast_protein_to_nucleotide.R
\name{blast_protein_to_nucleotide}
\alias{blast_protein_to_nucleotide}
\title{Perform Protein to Nucleotide BLAST Searches (TBLASTN)}
\usage{
blast_protein_to_nucleotide(
  query,
  subject,
  output.path = NULL,
  is.subject.db = FALSE,
  task = "tblastn",
  db.import = FALSE,
  postgres.user = NULL,
  evalue = 0.001,
  out.format = "csv",
  cores = 1,
  max.target.seqs = 10000L,
  db.soft.mask = FALSE,
  db.hard.mask = FALSE,
  blast.path = NULL
)
}
\arguments{
\item{query}{path to input file in fasta format.}

\item{subject}{path to subject file in fasta format or blast-able database.}

\item{output.path}{path to folder at which BLAST output table shall be stored. 
Default is \code{output.path = NULL} (hence \code{getwd()} is used).}

\item{is.subject.db}{logical specifying whether or not the \code{subject} file is a file in fasta format (\code{is.subject.db = FALSE}; default)
or a \code{fasta} file that was previously converted into a blast-able database using \code{makeblastdb} (\code{is.subject.db = TRUE}).}

\item{task}{nucleotide search task option. Options are:
\itemize{
\item \code{task = "tblastn"} : Standard protein-nucleotide comparisons (default).
\item \code{task = "tblastn-fast"} : Optimized protein-nucleotide comparisons.
}}

\item{db.import}{shall the BLAST output be stored in a PostgresSQL database and shall a connection be established to this database? Default is \code{db.import = FALSE}.
In case users wish to to only generate a BLAST output file without importing it to the current R session they can specify \code{db.import = NULL}.}

\item{postgres.user}{when \code{db.import = TRUE} and \code{out.format = "postgres"} is selected, the BLAST output is imported and stored in a 
PostgresSQL database. In that case, users need to have PostgresSQL installed and initialized on their system. 
Please consult the Installation Vignette for details.}

\item{evalue}{Expectation value (E) threshold for saving hits (default: \code{evalue = 0.001}).}

\item{out.format}{a character string specifying the format of the file in which the BLAST results shall be stored.
Available options are:
 \itemize{
 \item \code{out.format = "pair"} : Pairwise
 \item \code{out.format = "qa.ident"} : Query-anchored showing identities
 \item \code{out.format = "qa.nonident"} : Query-anchored no identities
 \item \code{out.format = "fq.ident"} : Flat query-anchored showing identities
 \item \code{out.format = "fq.nonident"} : Flat query-anchored no identities
 \item \code{out.format = "xml"} : XML
 \item \code{out.format = "tab"} : Tabular separated file
 \item \code{out.format = "tab.comment"} : Tabular separated file with comment lines
 \item \code{out.format = "ASN.1.text"} : Seqalign (Text ASN.1)
 \item \code{out.format = "ASN.1.binary"} : Seqalign (Binary ASN.1)
 \item \code{out.format = "csv"} : Comma-separated values
 \item \code{out.format = "ASN.1"} : BLAST archive (ASN.1)
 \item \code{out.format = "json.seq.aln"} : Seqalign (JSON)
 \item \code{out.format = "json.blast.multi"} : Multiple-file BLAST JSON
 \item \code{out.format = "xml2.blast.multi"} : Multiple-file BLAST XML2
 \item \code{out.format = "json.blast.single"} : Single-file BLAST JSON
 \item \code{out.format = "xml2.blast.single"} : Single-file BLAST XML2
 \item \code{out.format = "SAM"} : Sequence Alignment/Map (SAM)
 \item \code{out.format = "report"} : Organism Report
 }}

\item{cores}{number of cores for parallel BLAST searches.}

\item{max.target.seqs}{maximum number of aligned sequences that shall be retained. Please be aware that \code{max.target.seqs} selects best hits based on the database entry and not by the best e-value. See details here: https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/bty833/5106166 .}

\item{db.soft.mask}{shall low complexity regions be soft masked? Default is \code{db.soft.mask = FALSE}.}

\item{db.hard.mask}{shall low complexity regions be hard masked? Default is \code{db.hard.mask = FALSE}.}

\item{blast.path}{path to BLAST executables.}
}
\description{
Run nucleotide to protein BLAST of reference sequences
against a blast-able database or fasta file. Internally BLAST translates the 
nucleotide sequence into a protein sequence and then searches for hits.
}
\examples{
\dontrun{
blast_test <- blast_protein_to_nucleotide(
                 query   = system.file('seqs/qry_aa.fa', package = 'metablastr'),
                 subject = system.file('seqs/sbj_nn.fa', package = 'metablastr'),
                 output.path = tempdir(),
                 db.import  = FALSE)
                 
 # look at results
 blast_test
}

}
\seealso{
\code{\link{blast_nucleotide_to_nucleotide}}, \code{\link{blast_protein_to_protein}},
\code{\link{blast_nucleotide_to_protein}}, \code{\link{blast_best_hit}}
}
\author{
Hajk-Georg Drost
}
